/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "opensv_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace opensv {

int _kErrorCodeValues[] = {
  ErrorCode::ReferenceSignatureShortage,
  ErrorCode::ReferenceSignatureQuality,
  ErrorCode::AccountNotExist,
  ErrorCode::TestSignatureNotFound,
  ErrorCode::TooMuchTestSignatureGiven
};
const char* _kErrorCodeNames[] = {
  "ReferenceSignatureShortage",
  "ReferenceSignatureQuality",
  "AccountNotExist",
  "TestSignatureNotFound",
  "TooMuchTestSignatureGiven"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Point::~Point() throw() {
}


void Point::__set_t(const int32_t val) {
  this->t = val;
}

void Point::__set_x(const double val) {
  this->x = val;
}

void Point::__set_y(const double val) {
  this->y = val;
}

void Point::__set_p(const double val) {
  this->p = val;
}

const char* Point::ascii_fingerprint = "9989B0129D3DDABA375EE4C10D5B2A52";
const uint8_t Point::binary_fingerprint[16] = {0x99,0x89,0xB0,0x12,0x9D,0x3D,0xDA,0xBA,0x37,0x5E,0xE4,0xC1,0x0D,0x5B,0x2A,0x52};

uint32_t Point::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->t);
          this->__isset.t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p);
          this->__isset.p = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Point::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Point");

  xfer += oprot->writeFieldBegin("t", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->t);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->p);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Point &a, Point &b) {
  using ::std::swap;
  swap(a.t, b.t);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.p, b.p);
  swap(a.__isset, b.__isset);
}

Point::Point(const Point& other0) {
  t = other0.t;
  x = other0.x;
  y = other0.y;
  p = other0.p;
  __isset = other0.__isset;
}
Point& Point::operator=(const Point& other1) {
  t = other1.t;
  x = other1.x;
  y = other1.y;
  p = other1.p;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Point& obj) {
  using apache::thrift::to_string;
  out << "Point(";
  out << "t=" << to_string(obj.t);
  out << ", " << "x=" << to_string(obj.x);
  out << ", " << "y=" << to_string(obj.y);
  out << ", " << "p=" << to_string(obj.p);
  out << ")";
  return out;
}


Signature::~Signature() throw() {
}


void Signature::__set_points(const std::vector<Point> & val) {
  this->points = val;
}

const char* Signature::ascii_fingerprint = "27B3F249F7157EBDF6D250D3814B68E2";
const uint8_t Signature::binary_fingerprint[16] = {0x27,0xB3,0xF2,0x49,0xF7,0x15,0x7E,0xBD,0xF6,0xD2,0x50,0xD3,0x81,0x4B,0x68,0xE2};

uint32_t Signature::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->points.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->points.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->points[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.points = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Signature::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Signature");

  xfer += oprot->writeFieldBegin("points", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->points.size()));
    std::vector<Point> ::const_iterator _iter7;
    for (_iter7 = this->points.begin(); _iter7 != this->points.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Signature &a, Signature &b) {
  using ::std::swap;
  swap(a.points, b.points);
  swap(a.__isset, b.__isset);
}

Signature::Signature(const Signature& other8) {
  points = other8.points;
  __isset = other8.__isset;
}
Signature& Signature::operator=(const Signature& other9) {
  points = other9.points;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Signature& obj) {
  using apache::thrift::to_string;
  out << "Signature(";
  out << "points=" << to_string(obj.points);
  out << ")";
  return out;
}


Request::~Request() throw() {
}


void Request::__set_id(const int32_t val) {
  this->id = val;
}

void Request::__set_signatures(const std::vector<Signature> & val) {
  this->signatures = val;
}

const char* Request::ascii_fingerprint = "F8BB85FA0A7984D1EEC3366E94F262AD";
const uint8_t Request::binary_fingerprint[16] = {0xF8,0xBB,0x85,0xFA,0x0A,0x79,0x84,0xD1,0xEE,0xC3,0x36,0x6E,0x94,0xF2,0x62,0xAD};

uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->signatures.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->signatures.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += this->signatures[_i14].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.signatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Request");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signatures", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->signatures.size()));
    std::vector<Signature> ::const_iterator _iter15;
    for (_iter15 = this->signatures.begin(); _iter15 != this->signatures.end(); ++_iter15)
    {
      xfer += (*_iter15).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Request &a, Request &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.signatures, b.signatures);
  swap(a.__isset, b.__isset);
}

Request::Request(const Request& other16) {
  id = other16.id;
  signatures = other16.signatures;
  __isset = other16.__isset;
}
Request& Request::operator=(const Request& other17) {
  id = other17.id;
  signatures = other17.signatures;
  __isset = other17.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Request& obj) {
  using apache::thrift::to_string;
  out << "Request(";
  out << "id=" << to_string(obj.id);
  out << ", " << "signatures=" << to_string(obj.signatures);
  out << ")";
  return out;
}


Ret::~Ret() throw() {
}


void Ret::__set_success(const bool val) {
  this->success = val;
}

void Ret::__set_error(const ErrorCode::type val) {
  this->error = val;
}

const char* Ret::ascii_fingerprint = "C65334CFDD56CF52A836EB6A6065B724";
const uint8_t Ret::binary_fingerprint[16] = {0xC6,0x53,0x34,0xCF,0xDD,0x56,0xCF,0x52,0xA8,0x36,0xEB,0x6A,0x60,0x65,0xB7,0x24};

uint32_t Ret::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->error = (ErrorCode::type)ecast18;
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Ret::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Ret");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Ret &a, Ret &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.error, b.error);
  swap(a.__isset, b.__isset);
}

Ret::Ret(const Ret& other19) {
  success = other19.success;
  error = other19.error;
  __isset = other19.__isset;
}
Ret& Ret::operator=(const Ret& other20) {
  success = other20.success;
  error = other20.error;
  __isset = other20.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Ret& obj) {
  using apache::thrift::to_string;
  out << "Ret(";
  out << "success=" << to_string(obj.success);
  out << ", " << "error=" << to_string(obj.error);
  out << ")";
  return out;
}

} // namespace
