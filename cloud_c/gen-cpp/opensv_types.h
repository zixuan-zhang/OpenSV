/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef opensv_TYPES_H
#define opensv_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace opensv {

struct ErrorCode {
  enum type {
    ReferenceSignatureShortage = 0,
    ReferenceSignatureQuality = 1,
    AccountNotExist = 2,
    TestSignatureNotFound = 3,
    TooMuchTestSignatureGiven = 4
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

class Point;

class Signature;

class Request;

class Ret;

typedef struct _Point__isset {
  _Point__isset() : t(false), x(false), y(false), p(false) {}
  bool t :1;
  bool x :1;
  bool y :1;
  bool p :1;
} _Point__isset;

class Point {
 public:

  static const char* ascii_fingerprint; // = "9989B0129D3DDABA375EE4C10D5B2A52";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x89,0xB0,0x12,0x9D,0x3D,0xDA,0xBA,0x37,0x5E,0xE4,0xC1,0x0D,0x5B,0x2A,0x52};

  Point(const Point&);
  Point& operator=(const Point&);
  Point() : t(0), x(0), y(0), p(0) {
  }

  virtual ~Point() throw();
  int32_t t;
  double x;
  double y;
  double p;

  _Point__isset __isset;

  void __set_t(const int32_t val);

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_p(const double val);

  bool operator == (const Point & rhs) const
  {
    if (!(t == rhs.t))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(p == rhs.p))
      return false;
    return true;
  }
  bool operator != (const Point &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Point& obj);
};

void swap(Point &a, Point &b);

typedef struct _Signature__isset {
  _Signature__isset() : points(false) {}
  bool points :1;
} _Signature__isset;

class Signature {
 public:

  static const char* ascii_fingerprint; // = "27B3F249F7157EBDF6D250D3814B68E2";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0xB3,0xF2,0x49,0xF7,0x15,0x7E,0xBD,0xF6,0xD2,0x50,0xD3,0x81,0x4B,0x68,0xE2};

  Signature(const Signature&);
  Signature& operator=(const Signature&);
  Signature() {
  }

  virtual ~Signature() throw();
  std::vector<Point>  points;

  _Signature__isset __isset;

  void __set_points(const std::vector<Point> & val);

  bool operator == (const Signature & rhs) const
  {
    if (!(points == rhs.points))
      return false;
    return true;
  }
  bool operator != (const Signature &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Signature & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Signature& obj);
};

void swap(Signature &a, Signature &b);

typedef struct _Request__isset {
  _Request__isset() : id(false), signatures(false) {}
  bool id :1;
  bool signatures :1;
} _Request__isset;

class Request {
 public:

  static const char* ascii_fingerprint; // = "F8BB85FA0A7984D1EEC3366E94F262AD";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0xBB,0x85,0xFA,0x0A,0x79,0x84,0xD1,0xEE,0xC3,0x36,0x6E,0x94,0xF2,0x62,0xAD};

  Request(const Request&);
  Request& operator=(const Request&);
  Request() : id(0) {
  }

  virtual ~Request() throw();
  int32_t id;
  std::vector<Signature>  signatures;

  _Request__isset __isset;

  void __set_id(const int32_t val);

  void __set_signatures(const std::vector<Signature> & val);

  bool operator == (const Request & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(signatures == rhs.signatures))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Request& obj);
};

void swap(Request &a, Request &b);

typedef struct _Ret__isset {
  _Ret__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _Ret__isset;

class Ret {
 public:

  static const char* ascii_fingerprint; // = "C65334CFDD56CF52A836EB6A6065B724";
  static const uint8_t binary_fingerprint[16]; // = {0xC6,0x53,0x34,0xCF,0xDD,0x56,0xCF,0x52,0xA8,0x36,0xEB,0x6A,0x60,0x65,0xB7,0x24};

  Ret(const Ret&);
  Ret& operator=(const Ret&);
  Ret() : success(0), error((ErrorCode::type)0) {
  }

  virtual ~Ret() throw();
  bool success;
  ErrorCode::type error;

  _Ret__isset __isset;

  void __set_success(const bool val);

  void __set_error(const ErrorCode::type val);

  bool operator == (const Ret & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const Ret &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ret & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Ret& obj);
};

void swap(Ret &a, Ret &b);

} // namespace

#endif
