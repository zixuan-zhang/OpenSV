/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HandWriter_H
#define HandWriter_H

#include <thrift/TDispatchProcessor.h>
#include "opensv_types.h"

namespace opensv {

class HandWriterIf {
 public:
  virtual ~HandWriterIf() {}
  virtual int32_t ping(const int32_t num) = 0;
  virtual void accountRegister(Ret& _return, const Request& request) = 0;
  virtual void verify(Ret& _return, const Request& request) = 0;
};

class HandWriterIfFactory {
 public:
  typedef HandWriterIf Handler;

  virtual ~HandWriterIfFactory() {}

  virtual HandWriterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HandWriterIf* /* handler */) = 0;
};

class HandWriterIfSingletonFactory : virtual public HandWriterIfFactory {
 public:
  HandWriterIfSingletonFactory(const boost::shared_ptr<HandWriterIf>& iface) : iface_(iface) {}
  virtual ~HandWriterIfSingletonFactory() {}

  virtual HandWriterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HandWriterIf* /* handler */) {}

 protected:
  boost::shared_ptr<HandWriterIf> iface_;
};

class HandWriterNull : virtual public HandWriterIf {
 public:
  virtual ~HandWriterNull() {}
  int32_t ping(const int32_t /* num */) {
    int32_t _return = 0;
    return _return;
  }
  void accountRegister(Ret& /* _return */, const Request& /* request */) {
    return;
  }
  void verify(Ret& /* _return */, const Request& /* request */) {
    return;
  }
};

typedef struct _HandWriter_ping_args__isset {
  _HandWriter_ping_args__isset() : num(false) {}
  bool num :1;
} _HandWriter_ping_args__isset;

class HandWriter_ping_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  HandWriter_ping_args(const HandWriter_ping_args&);
  HandWriter_ping_args& operator=(const HandWriter_ping_args&);
  HandWriter_ping_args() : num(0) {
  }

  virtual ~HandWriter_ping_args() throw();
  int32_t num;

  _HandWriter_ping_args__isset __isset;

  void __set_num(const int32_t val);

  bool operator == (const HandWriter_ping_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const HandWriter_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandWriter_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_ping_args& obj);
};


class HandWriter_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~HandWriter_ping_pargs() throw();
  const int32_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_ping_pargs& obj);
};

typedef struct _HandWriter_ping_result__isset {
  _HandWriter_ping_result__isset() : success(false) {}
  bool success :1;
} _HandWriter_ping_result__isset;

class HandWriter_ping_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  HandWriter_ping_result(const HandWriter_ping_result&);
  HandWriter_ping_result& operator=(const HandWriter_ping_result&);
  HandWriter_ping_result() : success(0) {
  }

  virtual ~HandWriter_ping_result() throw();
  int32_t success;

  _HandWriter_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const HandWriter_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HandWriter_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandWriter_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_ping_result& obj);
};

typedef struct _HandWriter_ping_presult__isset {
  _HandWriter_ping_presult__isset() : success(false) {}
  bool success :1;
} _HandWriter_ping_presult__isset;

class HandWriter_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~HandWriter_ping_presult() throw();
  int32_t* success;

  _HandWriter_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_ping_presult& obj);
};

typedef struct _HandWriter_accountRegister_args__isset {
  _HandWriter_accountRegister_args__isset() : request(false) {}
  bool request :1;
} _HandWriter_accountRegister_args__isset;

class HandWriter_accountRegister_args {
 public:

  static const char* ascii_fingerprint; // = "090BBBF1F94CE9677E5950B26C2895D3";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0x0B,0xBB,0xF1,0xF9,0x4C,0xE9,0x67,0x7E,0x59,0x50,0xB2,0x6C,0x28,0x95,0xD3};

  HandWriter_accountRegister_args(const HandWriter_accountRegister_args&);
  HandWriter_accountRegister_args& operator=(const HandWriter_accountRegister_args&);
  HandWriter_accountRegister_args() {
  }

  virtual ~HandWriter_accountRegister_args() throw();
  Request request;

  _HandWriter_accountRegister_args__isset __isset;

  void __set_request(const Request& val);

  bool operator == (const HandWriter_accountRegister_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const HandWriter_accountRegister_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandWriter_accountRegister_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_accountRegister_args& obj);
};


class HandWriter_accountRegister_pargs {
 public:

  static const char* ascii_fingerprint; // = "090BBBF1F94CE9677E5950B26C2895D3";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0x0B,0xBB,0xF1,0xF9,0x4C,0xE9,0x67,0x7E,0x59,0x50,0xB2,0x6C,0x28,0x95,0xD3};


  virtual ~HandWriter_accountRegister_pargs() throw();
  const Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_accountRegister_pargs& obj);
};

typedef struct _HandWriter_accountRegister_result__isset {
  _HandWriter_accountRegister_result__isset() : success(false) {}
  bool success :1;
} _HandWriter_accountRegister_result__isset;

class HandWriter_accountRegister_result {
 public:

  static const char* ascii_fingerprint; // = "8121A148756E477647886048CFDB54EB";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x21,0xA1,0x48,0x75,0x6E,0x47,0x76,0x47,0x88,0x60,0x48,0xCF,0xDB,0x54,0xEB};

  HandWriter_accountRegister_result(const HandWriter_accountRegister_result&);
  HandWriter_accountRegister_result& operator=(const HandWriter_accountRegister_result&);
  HandWriter_accountRegister_result() {
  }

  virtual ~HandWriter_accountRegister_result() throw();
  Ret success;

  _HandWriter_accountRegister_result__isset __isset;

  void __set_success(const Ret& val);

  bool operator == (const HandWriter_accountRegister_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HandWriter_accountRegister_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandWriter_accountRegister_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_accountRegister_result& obj);
};

typedef struct _HandWriter_accountRegister_presult__isset {
  _HandWriter_accountRegister_presult__isset() : success(false) {}
  bool success :1;
} _HandWriter_accountRegister_presult__isset;

class HandWriter_accountRegister_presult {
 public:

  static const char* ascii_fingerprint; // = "8121A148756E477647886048CFDB54EB";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x21,0xA1,0x48,0x75,0x6E,0x47,0x76,0x47,0x88,0x60,0x48,0xCF,0xDB,0x54,0xEB};


  virtual ~HandWriter_accountRegister_presult() throw();
  Ret* success;

  _HandWriter_accountRegister_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_accountRegister_presult& obj);
};

typedef struct _HandWriter_verify_args__isset {
  _HandWriter_verify_args__isset() : request(false) {}
  bool request :1;
} _HandWriter_verify_args__isset;

class HandWriter_verify_args {
 public:

  static const char* ascii_fingerprint; // = "090BBBF1F94CE9677E5950B26C2895D3";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0x0B,0xBB,0xF1,0xF9,0x4C,0xE9,0x67,0x7E,0x59,0x50,0xB2,0x6C,0x28,0x95,0xD3};

  HandWriter_verify_args(const HandWriter_verify_args&);
  HandWriter_verify_args& operator=(const HandWriter_verify_args&);
  HandWriter_verify_args() {
  }

  virtual ~HandWriter_verify_args() throw();
  Request request;

  _HandWriter_verify_args__isset __isset;

  void __set_request(const Request& val);

  bool operator == (const HandWriter_verify_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const HandWriter_verify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandWriter_verify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_verify_args& obj);
};


class HandWriter_verify_pargs {
 public:

  static const char* ascii_fingerprint; // = "090BBBF1F94CE9677E5950B26C2895D3";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0x0B,0xBB,0xF1,0xF9,0x4C,0xE9,0x67,0x7E,0x59,0x50,0xB2,0x6C,0x28,0x95,0xD3};


  virtual ~HandWriter_verify_pargs() throw();
  const Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_verify_pargs& obj);
};

typedef struct _HandWriter_verify_result__isset {
  _HandWriter_verify_result__isset() : success(false) {}
  bool success :1;
} _HandWriter_verify_result__isset;

class HandWriter_verify_result {
 public:

  static const char* ascii_fingerprint; // = "8121A148756E477647886048CFDB54EB";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x21,0xA1,0x48,0x75,0x6E,0x47,0x76,0x47,0x88,0x60,0x48,0xCF,0xDB,0x54,0xEB};

  HandWriter_verify_result(const HandWriter_verify_result&);
  HandWriter_verify_result& operator=(const HandWriter_verify_result&);
  HandWriter_verify_result() {
  }

  virtual ~HandWriter_verify_result() throw();
  Ret success;

  _HandWriter_verify_result__isset __isset;

  void __set_success(const Ret& val);

  bool operator == (const HandWriter_verify_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HandWriter_verify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandWriter_verify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_verify_result& obj);
};

typedef struct _HandWriter_verify_presult__isset {
  _HandWriter_verify_presult__isset() : success(false) {}
  bool success :1;
} _HandWriter_verify_presult__isset;

class HandWriter_verify_presult {
 public:

  static const char* ascii_fingerprint; // = "8121A148756E477647886048CFDB54EB";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x21,0xA1,0x48,0x75,0x6E,0x47,0x76,0x47,0x88,0x60,0x48,0xCF,0xDB,0x54,0xEB};


  virtual ~HandWriter_verify_presult() throw();
  Ret* success;

  _HandWriter_verify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HandWriter_verify_presult& obj);
};

class HandWriterClient : virtual public HandWriterIf {
 public:
  HandWriterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HandWriterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping(const int32_t num);
  void send_ping(const int32_t num);
  int32_t recv_ping();
  void accountRegister(Ret& _return, const Request& request);
  void send_accountRegister(const Request& request);
  void recv_accountRegister(Ret& _return);
  void verify(Ret& _return, const Request& request);
  void send_verify(const Request& request);
  void recv_verify(Ret& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HandWriterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HandWriterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HandWriterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_accountRegister(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HandWriterProcessor(boost::shared_ptr<HandWriterIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &HandWriterProcessor::process_ping;
    processMap_["accountRegister"] = &HandWriterProcessor::process_accountRegister;
    processMap_["verify"] = &HandWriterProcessor::process_verify;
  }

  virtual ~HandWriterProcessor() {}
};

class HandWriterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HandWriterProcessorFactory(const ::boost::shared_ptr< HandWriterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HandWriterIfFactory > handlerFactory_;
};

class HandWriterMultiface : virtual public HandWriterIf {
 public:
  HandWriterMultiface(std::vector<boost::shared_ptr<HandWriterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HandWriterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HandWriterIf> > ifaces_;
  HandWriterMultiface() {}
  void add(boost::shared_ptr<HandWriterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping(const int32_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(num);
    }
    return ifaces_[i]->ping(num);
  }

  void accountRegister(Ret& _return, const Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->accountRegister(_return, request);
    }
    ifaces_[i]->accountRegister(_return, request);
    return;
  }

  void verify(Ret& _return, const Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify(_return, request);
    }
    ifaces_[i]->verify(_return, request);
    return;
  }

};

} // namespace

#endif
